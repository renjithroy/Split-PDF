{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument } from \"pdf-lib\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]);\n  useEffect(() => {\n    // Fetch the number of pages from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n\n        // Generate an array of image URLs for each page\n        const images = await Promise.all(Array.from({\n          length: numPages\n        }, async (_, index) => {\n          const page = await pdfDoc.getPage(index + 1);\n          const pngImage = await page.renderAsPNG();\n          const dataUrl = URL.createObjectURL(new Blob([pngImage], {\n            type: \"image/png\"\n          }));\n          return dataUrl;\n        }));\n        setPageImages(images);\n      };\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n    setSelectedPages(prevSelectedPages => isChecked ? [...prevSelectedPages, pageNumber] : prevSelectedPages.filter(p => p !== pageNumber));\n  };\n  const renderPageCheckboxesAndImages = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select Pages to Include:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), Array.from({\n        length: numPages\n      }, (_, index) => {\n        const pageNumber = index + 1;\n        const isChecked = selectedPages.includes(pageNumber);\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: pageImages[index],\n            alt: `Page ${pageNumber}`,\n            width: \"150\",\n            height: \"150\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-checkbox\",\n            name: \"selectCheckbox\",\n            checked: isChecked,\n            onChange: event => handleCheckboxChange(event, pageNumber)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), \"Page \", pageNumber]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object\n    const selectedPagesData = {\n      selectedPages: selectedPages\n    };\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        params: selectedPagesData,\n        // Pass selectedPagesData as query params\n        responseType: 'blob' // Tell axios to treat the response as a binary blob\n      });\n\n      console.log(response.data); // Log the response from the backend\n\n      // Trigger download by creating a Blob and using a link to initiate the download\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Extract Pages from your PDF!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control-file\",\n          accept: \".pdf\",\n          name: \"pdfFile\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), numPages !== null && pageImages.length > 0 && renderPageCheckboxesAndImages(), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Download Modified PDF\",\n          className: \"btn btn-default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QMRWw/qL4/KTudU/etLcT7fYJcg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","PDFDocument","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","numPages","setNumPages","selectedPages","setSelectedPages","pageImages","setPageImages","reader","FileReader","onload","pdfBuffer","result","pdfDoc","load","getPageCount","console","log","images","Promise","all","Array","from","length","_","index","page","getPage","pngImage","renderAsPNG","dataUrl","URL","createObjectURL","Blob","type","readAsArrayBuffer","handleFileChange","event","target","files","handleCheckboxChange","isChecked","checked","pageNumber","prevSelectedPages","filter","p","renderPageCheckboxesAndImages","children","fileName","_jsxFileName","lineNumber","columnNumber","includes","src","alt","width","height","className","name","onChange","handleSubmit","preventDefault","alert","formData","FormData","append","selectedPagesData","response","post","headers","params","responseType","data","blob","url","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","error","onSubmit","accept","value","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument } from \"pdf-lib\";\nimport './App.css';\n\nexport default function App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]);\n\n  useEffect(() => {\n    // Fetch the number of pages from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n\n        // Generate an array of image URLs for each page\n        const images = await Promise.all(\n          Array.from({ length: numPages }, async (_, index) => {\n            const page = await pdfDoc.getPage(index + 1);\n            const pngImage = await page.renderAsPNG();\n            const dataUrl = URL.createObjectURL(new Blob([pngImage], { type: \"image/png\" }));\n            return dataUrl;\n          })\n        );\n        setPageImages(images);\n      };\n\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n\n    setSelectedPages((prevSelectedPages) =>\n      isChecked\n        ? [...prevSelectedPages, pageNumber]\n        : prevSelectedPages.filter((p) => p !== pageNumber)\n    );\n  };\n\n  const renderPageCheckboxesAndImages = () => {\n    return (\n      <div>\n        <p>Select Pages to Include:</p>\n        {Array.from({ length: numPages }, (_, index) => {\n          const pageNumber = index + 1;\n          const isChecked = selectedPages.includes(pageNumber);\n\n          return (\n            <label key={index}>\n              <img src={pageImages[index]} alt={`Page ${pageNumber}`} width=\"150\" height=\"150\" />\n              <br />\n              <input\n                type=\"checkbox\"\n                className=\"form-checkbox\"\n                name=\"selectCheckbox\"\n                checked={isChecked}\n                onChange={(event) => handleCheckboxChange(event, pageNumber)}\n              />\n              Page {pageNumber}\n            </label>\n          );\n        })}\n        <br /> <br />\n      </div>\n    );\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object\n    const selectedPagesData = {\n      selectedPages: selectedPages,\n    };\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n        params: selectedPagesData, // Pass selectedPagesData as query params\n        responseType: 'blob', // Tell axios to treat the response as a binary blob\n      });\n\n      console.log(response.data); // Log the response from the backend\n\n      // Trigger download by creating a Blob and using a link to initiate the download\n      const blob = new Blob([response.data], { type: 'application/pdf' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n  };\n\n  return (\n    <div className=\"main\">\n      <h1>Extract Pages from your PDF!</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <input type=\"file\" className=\"form-control-file\" accept=\".pdf\" name=\"pdfFile\" onChange={handleFileChange} />\n          <br />\n          {numPages !== null && pageImages.length > 0 && renderPageCheckboxesAndImages()}\n          <input type=\"submit\" value=\"Download Modified PDF\" className=\"btn btn-default\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}