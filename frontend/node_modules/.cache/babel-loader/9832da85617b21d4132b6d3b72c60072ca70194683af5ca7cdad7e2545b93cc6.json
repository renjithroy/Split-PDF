{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument, PDFPage } from \"pdf-lib\";\nimport pdfjsLib from \"pdfjs-dist\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]);\n  useEffect(() => {\n    // Fetch the number of pages and extract page images from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n\n        // Extract page images\n        const images = await extractPageImages(pdfBuffer, numPages);\n        setPageImages(images);\n      };\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Function to extract page images from the PDF buffer\n  const extractPageImages = async (pdfBuffer, numPages) => {\n    const images = [];\n    const loadingTask = pdfjsLib.getDocument({\n      data: pdfBuffer\n    });\n    for (let i = 1; i <= numPages; i++) {\n      const page = await loadingTask.getPage(i);\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = viewport.width;\n      canvas.height = viewport.height;\n      const renderContext = {\n        canvasContext: canvas.getContext(\"2d\"),\n        viewport: viewport\n      };\n      await page.render(renderContext);\n      const image = canvas.toDataURL(); // Convert canvas to base64-encoded PNG image\n      images.push(image);\n    }\n    return images;\n  };\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n    setSelectedPages(prevSelectedPages => isChecked ? [...prevSelectedPages, pageNumber] : prevSelectedPages.filter(p => p !== pageNumber));\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object\n    const selectedPagesData = {\n      selectedPages: selectedPages\n    };\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        params: selectedPagesData,\n        // Pass selectedPagesData as query params\n        responseType: 'blob' // Tell axios to treat the response as a binary blob\n      });\n\n      console.log(response.data); // Log the response from the backend\n\n      // Trigger download by creating a Blob and using a link to initiate the download\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Extract Pages from your PDF!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control-file\",\n          accept: \".pdf\",\n          name: \"pdfFile\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), numPages !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Pages to Include:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), Array.from({\n            length: numPages\n          }, (_, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Page \", index + 1, /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"form-checkbox\",\n              name: \"selectCheckbox\",\n              checked: selectedPages.includes(index + 1),\n              onChange: event => handleCheckboxChange(event, index + 1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this), pageImages[index] && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pageImages[index],\n              alt: `Page ${index + 1}`,\n              width: \"100\",\n              height: \"100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Download Modified PDF\",\n          className: \"btn btn-default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QMRWw/qL4/KTudU/etLcT7fYJcg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","PDFDocument","PDFPage","pdfjsLib","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","numPages","setNumPages","selectedPages","setSelectedPages","pageImages","setPageImages","reader","FileReader","onload","pdfBuffer","result","pdfDoc","load","getPageCount","console","log","images","extractPageImages","readAsArrayBuffer","loadingTask","getDocument","data","i","page","getPage","viewport","getViewport","scale","canvas","document","createElement","width","height","renderContext","canvasContext","getContext","render","image","toDataURL","push","handleFileChange","event","target","files","handleCheckboxChange","isChecked","checked","pageNumber","prevSelectedPages","filter","p","handleSubmit","preventDefault","alert","formData","FormData","append","selectedPagesData","response","post","headers","params","responseType","blob","Blob","type","url","URL","createObjectURL","link","href","setAttribute","body","appendChild","click","removeChild","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","accept","name","onChange","Array","from","length","_","index","includes","src","alt","value","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument, PDFPage } from \"pdf-lib\";\nimport pdfjsLib from \"pdfjs-dist\";\nimport './App.css';\n\nexport default function App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]);\n\n  useEffect(() => {\n    // Fetch the number of pages and extract page images from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n\n        // Extract page images\n        const images = await extractPageImages(pdfBuffer, numPages);\n        setPageImages(images);\n      };\n\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Function to extract page images from the PDF buffer\n  const extractPageImages = async (pdfBuffer, numPages) => {\n    const images = [];\n    const loadingTask = pdfjsLib.getDocument({ data: pdfBuffer });\n\n    for (let i = 1; i <= numPages; i++) {\n      const page = await loadingTask.getPage(i);\n      const viewport = page.getViewport({ scale: 1.0 });\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = viewport.width;\n      canvas.height = viewport.height;\n      const renderContext = {\n        canvasContext: canvas.getContext(\"2d\"),\n        viewport: viewport,\n      };\n      await page.render(renderContext);\n      const image = canvas.toDataURL(); // Convert canvas to base64-encoded PNG image\n      images.push(image);\n    }\n\n    return images;\n  };\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n\n    setSelectedPages((prevSelectedPages) =>\n      isChecked\n        ? [...prevSelectedPages, pageNumber]\n        : prevSelectedPages.filter((p) => p !== pageNumber)\n    );\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object\n    const selectedPagesData = {\n      selectedPages: selectedPages,\n    };\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n        params: selectedPagesData, // Pass selectedPagesData as query params\n        responseType: 'blob', // Tell axios to treat the response as a binary blob\n      });\n\n      console.log(response.data); // Log the response from the backend\n\n      // Trigger download by creating a Blob and using a link to initiate the download\n      const blob = new Blob([response.data], { type: 'application/pdf' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n  };\n\n  return (\n    <div className=\"main\">\n      <h1>Extract Pages from your PDF!</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <input type=\"file\" className=\"form-control-file\" accept=\".pdf\" name=\"pdfFile\" onChange={handleFileChange} />\n          <br />\n          {numPages !== null && (\n            <div>\n              <p>Select Pages to Include:</p>\n              {Array.from({ length: numPages }, (_, index) => (\n                <label key={index}>\n                  Page {index + 1}\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-checkbox\"\n                    name=\"selectCheckbox\"\n                    checked={selectedPages.includes(index + 1)}\n                    onChange={(event) => handleCheckboxChange(event, index + 1)}\n                  />\n                  {pageImages[index] && (\n                    <img\n                      src={pageImages[index]}\n                      alt={`Page ${index + 1}`}\n                      width=\"100\"\n                      height=\"100\"\n                    />\n                  )}\n                </label>\n              ))}\n              <br /> <br />\n            </div>\n          )}\n          <input type=\"submit\" value=\"Download Modified PDF\" className=\"btn btn-default\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}