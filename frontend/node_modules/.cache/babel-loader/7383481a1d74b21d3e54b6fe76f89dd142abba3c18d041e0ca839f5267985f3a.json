{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport pdfjs from \"pdfjs-dist\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]);\n  useEffect(() => {\n    // Fetch the number of pages from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n      };\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n  useEffect(() => {\n    // Load page images if numPages is available\n    if (numPages) {\n      convertPDFtoImages();\n    }\n  }, [numPages]);\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n    setSelectedPages(prevSelectedPages => isChecked ? [...prevSelectedPages, pageNumber] : prevSelectedPages.filter(p => p !== pageNumber));\n  };\n  const convertPDFtoImages = async () => {\n    const loadingTask = pdfjs.getDocument(new Uint8Array(selectedFile));\n    const pdf = await loadingTask.promise;\n    const images = [];\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n      const canvas = document.createElement(\"canvas\");\n      const context = canvas.getContext(\"2d\");\n      canvas.width = viewport.width;\n      canvas.height = viewport.height;\n      const renderContext = {\n        canvasContext: context,\n        viewport: viewport\n      };\n      await page.render(renderContext).promise;\n\n      // Convert canvas to image URL\n      const imageUrl = canvas.toDataURL(\"image/png\");\n      images.push(imageUrl);\n    }\n    setPageImages(images);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object\n    const selectedPagesData = {\n      selectedPages: selectedPages\n    };\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        params: selectedPagesData,\n        // Pass selectedPagesData as query params\n        responseType: 'blob' // Tell axios to treat the response as a binary blob\n      });\n\n      console.log(response.data); // Log the response from the backend\n\n      // Trigger download by creating a Blob and using a link to initiate the download\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n\n    setSelectedFile(null);\n    setNumPages(null);\n    setSelectedPages([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Extract Pages from your PDF!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control-file\",\n          accept: \".pdf\",\n          name: \"pdfFile\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), numPages !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Pages to Include:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this), Array.from({\n            length: numPages\n          }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Page \", index + 1, /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"form-checkbox\",\n                name: \"selectCheckbox\",\n                checked: selectedPages.includes(index + 1),\n                onChange: event => handleCheckboxChange(event, index + 1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 19\n            }, this), pageImages.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pageImages[index],\n              alt: `Page ${index + 1}`,\n              style: {\n                maxWidth: \"200px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Download Modified PDF\",\n          className: \"btn btn-default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6Np8wBVD0Vn6S4xGY15ueOtCyh4=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","PDFDocument","pdfjs","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","numPages","setNumPages","selectedPages","setSelectedPages","pageImages","setPageImages","reader","FileReader","onload","pdfBuffer","result","pdfDoc","load","getPageCount","console","log","readAsArrayBuffer","convertPDFtoImages","handleFileChange","event","target","files","handleCheckboxChange","page","isChecked","checked","pageNumber","prevSelectedPages","filter","p","loadingTask","getDocument","Uint8Array","pdf","promise","images","i","getPage","viewport","getViewport","scale","canvas","document","createElement","context","getContext","width","height","renderContext","canvasContext","render","imageUrl","toDataURL","push","handleSubmit","preventDefault","alert","formData","FormData","append","selectedPagesData","response","axios","post","headers","params","responseType","data","blob","Blob","type","url","URL","createObjectURL","link","href","setAttribute","body","appendChild","click","removeChild","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","accept","name","onChange","Array","from","length","_","index","includes","src","alt","style","maxWidth","value","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport pdfjs from \"pdfjs-dist\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]);\n\n  useEffect(() => {\n    // Fetch the number of pages from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n      };\n\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  useEffect(() => {\n    // Load page images if numPages is available\n    if (numPages) {\n      convertPDFtoImages();\n    }\n  }, [numPages]);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n\n    setSelectedPages((prevSelectedPages) =>\n      isChecked\n        ? [...prevSelectedPages, pageNumber]\n        : prevSelectedPages.filter((p) => p !== pageNumber)\n    );\n  };\n\n  const convertPDFtoImages = async () => {\n    const loadingTask = pdfjs.getDocument(new Uint8Array(selectedFile));\n    const pdf = await loadingTask.promise;\n    const images = [];\n\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const viewport = page.getViewport({ scale: 1.0 });\n\n      const canvas = document.createElement(\"canvas\");\n      const context = canvas.getContext(\"2d\");\n      canvas.width = viewport.width;\n      canvas.height = viewport.height;\n\n      const renderContext = {\n        canvasContext: context,\n        viewport: viewport,\n      };\n\n      await page.render(renderContext).promise;\n\n      // Convert canvas to image URL\n      const imageUrl = canvas.toDataURL(\"image/png\");\n      images.push(imageUrl);\n    }\n\n    setPageImages(images);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object\n    const selectedPagesData = {\n      selectedPages: selectedPages,\n    };\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n        params: selectedPagesData, // Pass selectedPagesData as query params\n        responseType: 'blob', // Tell axios to treat the response as a binary blob\n      });\n\n      console.log(response.data); // Log the response from the backend\n\n      // Trigger download by creating a Blob and using a link to initiate the download\n      const blob = new Blob([response.data], { type: 'application/pdf' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n    setSelectedFile(null);\n    setNumPages(null);\n    setSelectedPages([]);\n  };\n\n  return (\n    <div className=\"main\">\n      <h1>Extract Pages from your PDF!</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <input\n            type=\"file\"\n            className=\"form-control-file\"\n            accept=\".pdf\"\n            name=\"pdfFile\"\n            onChange={handleFileChange}\n          />\n          <br />\n          {numPages !== null && (\n            <div>\n              <p>Select Pages to Include:</p>\n              {Array.from({ length: numPages }, (_, index) => (\n                <div key={index}>\n                  <label>\n                    Page {index + 1}\n                    <input\n                      type=\"checkbox\"\n                      className=\"form-checkbox\"\n                      name=\"selectCheckbox\"\n                      checked={selectedPages.includes(index + 1)}\n                      onChange={(event) => handleCheckboxChange(event, index + 1)}\n                    />\n                  </label>\n                  {pageImages.length > 0 && (\n                    <img\n                      src={pageImages[index]}\n                      alt={`Page ${index + 1}`}\n                      style={{ maxWidth: \"200px\" }}\n                    />\n                  )}\n                </div>\n              ))}\n              <br /> <br />\n            </div>\n          )}\n          <input type=\"submit\" value=\"Download Modified PDF\" className=\"btn btn-default\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}