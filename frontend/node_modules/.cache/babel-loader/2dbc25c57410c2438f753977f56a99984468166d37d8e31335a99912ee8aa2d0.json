{"ast":null,"code":"import _toConsumableArray from\"/Users/renjithroy/Documents/SplitPDF/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _regeneratorRuntime from\"/Users/renjithroy/Documents/SplitPDF/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/renjithroy/Documents/SplitPDF/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/renjithroy/Documents/SplitPDF/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useRef}from\"react\";import axios from\"axios\";import{PDFDocument}from\"pdf-lib\";// Import pdf-lib in the frontend\nimport'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){// State variables to manage selected file, number of pages, and selected pages\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedFile=_useState2[0],setSelectedFile=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),numPages=_useState4[0],setNumPages=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),selectedPages=_useState6[0],setSelectedPages=_useState6[1];var _useState7=useState(\"Select a PDF to continue\"),_useState8=_slicedToArray(_useState7,2),buttonText=_useState8[0],setButtonText=_useState8[1];// Create a reference to the file input element\nvar fileInputRef=useRef(null);// useEffect hook to fetch the number of pages when a PDF file is selected\nuseEffect(function(){if(selectedFile){var reader=new FileReader();reader.onload=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var pdfBuffer,pdfDoc,_numPages;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:pdfBuffer=reader.result;_context.prev=1;_context.next=4;return PDFDocument.load(pdfBuffer);case 4:pdfDoc=_context.sent;// Get the total number of pages in the PDF document\n_numPages=pdfDoc.getPageCount();// console.log(\"Frontend Page no: \" + numPages);\nsetNumPages(_numPages);_context.next=17;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](1);// If there is an error in loading the PDF, handle it and show an alert to the user\nalert(\"Only PDF file type is supported\");// Reset the file input value and clear all state variables related to the selected file\nif(fileInputRef.current){fileInputRef.current.value=\"\";}setSelectedFile(null);setNumPages(null);setSelectedPages([]);return _context.abrupt(\"return\");case 17:case\"end\":return _context.stop();}},_callee,null,[[1,9]]);}));// Read the selected file as an array buffer\nreader.readAsArrayBuffer(selectedFile);}},[selectedFile]);// Function to handle file selection when a new file is chosen\nvar handleFileChange=function handleFileChange(event){setSelectedFile(event.target.files[0]);if(selectedPages.length===0){setButtonText(\"Select at least one page to continue\");}else{setButtonText(\"Download Modified PDF\");}};//this triggers the selectedFile useEffect\n// Function to handle checkbox selection for individual pages\nvar handleCheckboxChange=function handleCheckboxChange(event,page){var isChecked=event.target.checked;var pageNumber=page;// Update the list of selected pages based on the checkbox selection\nsetSelectedPages(function(prevSelectedPages){return isChecked?[].concat(_toConsumableArray(prevSelectedPages),[pageNumber]):prevSelectedPages.filter(function(p){return p!==pageNumber;});});// setButtonText(\"Download Modified PDF\");\n// Check if any page is selected and update the buttonText accordingly\nif(isChecked&&selectedPages.length===0){setButtonText(\"Download Modified PDF\");}else if(!isChecked&&selectedPages.length===1){setButtonText(\"Select at least one page to continue\");}};// Function to handle form submission for PDF modification and download\nvar handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event){var formData,selectedPagesData,response,blob,url,link;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:event.preventDefault();// Check if a PDF file has been selected before submitting the form\nif(selectedFile){_context2.next=4;break;}alert(\"Please select a PDF file.\");return _context2.abrupt(\"return\");case 4:// Create a FormData object to prepare the file for sending to the backend\nformData=new FormData();formData.append(\"pdfFile\",selectedFile);// Send selectedPages separately as a JSON object along with the file to the backend\nselectedPagesData={selectedPages:selectedPages};_context2.prev=7;_context2.next=10;return axios.post(\"http://localhost:5000/api/upload\",formData,{headers:{\"Content-Type\":\"multipart/form-data\"},params:selectedPagesData,// Pass selectedPagesData as query params\nresponseType:'blob'// Tell axios to treat the response as a binary blob\n});case 10:response=_context2.sent;// Log the response from the backend to the console\nconsole.log(response.data);// Trigger the download of the modified PDF by creating a Blob and using a link\nblob=new Blob([response.data],{type:'application/pdf'});url=URL.createObjectURL(blob);link=document.createElement('a');link.href=url;link.setAttribute('download','modified-file.pdf');document.body.appendChild(link);link.click();document.body.removeChild(link);// Reset the file input value after the form submission\nif(fileInputRef.current){fileInputRef.current.value=\"\";}_context2.next=27;break;case 23:_context2.prev=23;_context2.t0=_context2[\"catch\"](7);// If there is an error during the request, show an alert with the error message\nalert(\"Error uploading the file:\",_context2.t0);fileInputRef.current.value=\"\";// Handle errors, show error messages, etc.\ncase 27:// Reset all state variables related to the selected file and pages after form submission\nsetSelectedFile(null);setNumPages(null);setSelectedPages([]);setButtonText(\"Select PDF to continue\");case 31:case\"end\":return _context2.stop();}},_callee2,null,[[7,23]]);}));return function handleSubmit(_x){return _ref2.apply(this,arguments);};}();// JSX to render the component and UI\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"logo\",children:/*#__PURE__*/_jsxs(\"p\",{className:\"logo-text\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"S\"}),\"plit\",/*#__PURE__*/_jsx(\"span\",{className:\"pdf-letter-logo\",children:\"PDF\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"main\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Extract Pages from your \",/*#__PURE__*/_jsx(\"span\",{className:\"pdf-letter-heading\",children:\"PDF!\"})]}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"input\",{ref:fileInputRef,type:\"file\",className:\"form-control-file\",accept:\".pdf\",name:\"pdfFile\",onChange:handleFileChange}),/*#__PURE__*/_jsx(\"br\",{}),numPages!==null&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Select Pages to Include:\"}),Array.from({length:numPages},function(_,index){return/*#__PURE__*/_jsx(\"div\",{style:{padding:'5px',paddingRight:'10px',display:'inline-block'},children:/*#__PURE__*/_jsxs(\"label\",{children:[\"Page \",index+1,/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",className:\"form-checkbox\",name:\"selectCheckbox\",checked:selectedPages.includes(index+1),onChange:function onChange(event){return handleCheckboxChange(event,index+1);}})]})},index);})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:buttonText,className:\"btn btn-default\"})]})})]})]});}","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","PDFDocument","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","selectedFile","setSelectedFile","_useState3","_useState4","numPages","setNumPages","_useState5","_useState6","selectedPages","setSelectedPages","_useState7","_useState8","buttonText","setButtonText","fileInputRef","reader","FileReader","onload","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pdfBuffer","pdfDoc","_numPages","wrap","_callee$","_context","prev","next","result","load","sent","getPageCount","t0","alert","current","value","abrupt","stop","readAsArrayBuffer","handleFileChange","event","target","files","length","handleCheckboxChange","page","isChecked","checked","pageNumber","prevSelectedPages","concat","_toConsumableArray","filter","p","handleSubmit","_ref2","_callee2","formData","selectedPagesData","response","blob","url","link","_callee2$","_context2","preventDefault","FormData","append","post","headers","params","responseType","console","log","data","Blob","type","URL","createObjectURL","document","createElement","href","setAttribute","body","appendChild","click","removeChild","_x","apply","arguments","children","className","onSubmit","ref","accept","name","onChange","Array","from","_","index","style","padding","paddingRight","display","includes"],"sources":["/Users/renjithroy/Documents/SplitPDF/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument } from \"pdf-lib\"; // Import pdf-lib in the frontend\nimport './App.css';\n\nexport default function App() {\n  // State variables to manage selected file, number of pages, and selected pages\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [buttonText, setButtonText] = useState(\"Select a PDF to continue\");\n  \n  // Create a reference to the file input element\n  const fileInputRef = useRef(null);\n\n  // useEffect hook to fetch the number of pages when a PDF file is selected\n  useEffect(() => {\n    if (selectedFile) {\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        try {\n          \n          // Load the PDF document uploaded by user using pdf-lib\n          const pdfDoc = await PDFDocument.load(pdfBuffer);\n          \n          // Get the total number of pages in the PDF document\n          const numPages = pdfDoc.getPageCount();\n          // console.log(\"Frontend Page no: \" + numPages);\n          setNumPages(numPages);\n        \n        } catch {\n          \n          // If there is an error in loading the PDF, handle it and show an alert to the user\n          alert(\"Only PDF file type is supported\");\n\n          // Reset the file input value and clear all state variables related to the selected file\n          if (fileInputRef.current) {\n            fileInputRef.current.value = \"\";\n          }\n\n          setSelectedFile(null);\n          setNumPages(null);\n          setSelectedPages([]);\n          return;\n        }\n      };\n\n      // Read the selected file as an array buffer\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Function to handle file selection when a new file is chosen\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n\n\n    if (selectedPages.length === 0) {\n      setButtonText(\"Select at least one page to continue\");\n    } else {\n      setButtonText(\"Download Modified PDF\");\n    }\n\n  }; //this triggers the selectedFile useEffect\n\n  // Function to handle checkbox selection for individual pages\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n\n    // Update the list of selected pages based on the checkbox selection\n    setSelectedPages((prevSelectedPages) =>\n      isChecked\n        ? [...prevSelectedPages, pageNumber]\n        : prevSelectedPages.filter((p) => p !== pageNumber)\n    );\n    // setButtonText(\"Download Modified PDF\");\n\n    // Check if any page is selected and update the buttonText accordingly\n    if (isChecked && selectedPages.length === 0) {\n      setButtonText(\"Download Modified PDF\");\n    } else if (!isChecked && selectedPages.length === 1) {\n      setButtonText(\"Select at least one page to continue\");\n    }\n\n  };\n\n  // Function to handle form submission for PDF modification and download\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // Check if a PDF file has been selected before submitting the form\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n\n    // Create a FormData object to prepare the file for sending to the backend\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object along with the file to the backend\n    const selectedPagesData = {\n      selectedPages: selectedPages,\n    };\n\n    try {\n      // Make a POST request to the backend to process the selected pages and return the modified PDF\n      const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n        params: selectedPagesData, // Pass selectedPagesData as query params\n        responseType: 'blob', // Tell axios to treat the response as a binary blob\n      });\n\n      // Log the response from the backend to the console\n      console.log(response.data);\n\n      // Trigger the download of the modified PDF by creating a Blob and using a link\n      const blob = new Blob([response.data], { type: 'application/pdf' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified-file.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // Reset the file input value after the form submission\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n\n    } catch (error) {\n      // If there is an error during the request, show an alert with the error message\n      alert(\"Error uploading the file:\", error);\n      fileInputRef.current.value = \"\";\n      // Handle errors, show error messages, etc.\n    }\n\n    // Reset all state variables related to the selected file and pages after form submission\n    setSelectedFile(null);\n    setNumPages(null);\n    setSelectedPages([]);\n    setButtonText(\"Select PDF to continue\");\n  };\n\n  // JSX to render the component and UI\n  return (\n    <div>\n    <div className=\"logo\"><p className=\"logo-text\"><span>S</span>plit<span className=\"pdf-letter-logo\">PDF</span></p></div>\n    <div className=\"main\">\n      {/* Heading for the app */}\n      <h1>Extract Pages from your <span className=\"pdf-letter-heading\">PDF!</span></h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          {/* File input element */}\n          <input ref={fileInputRef} type=\"file\" className=\"form-control-file\" accept=\".pdf\" name=\"pdfFile\" onChange={handleFileChange} />\n          <br />\n          {/* Render the list of pages when the number of pages is known */}\n          {numPages !== null && (\n            <div>\n              <p>Select Pages to Include:</p>\n              {/* Render checkboxes for each page */}\n              {Array.from({ length: numPages }, (_, index) => (\n                <div key={index} style={{ padding: '5px', paddingRight: '10px', display: 'inline-block' }}>\n                  <label>\n                    Page {index + 1}\n                    {/* Checkbox for each page */}\n                    <input\n                      type=\"checkbox\"\n                      className=\"form-checkbox\"\n                      name=\"selectCheckbox\"\n                      checked={selectedPages.includes(index + 1)}\n                      onChange={(event) => handleCheckboxChange(event, index + 1)}\n                    />\n                  </label>\n                </div>\n              ))}\n            </div>\n          )}\n          <br />\n          {/* Submit button */}\n          <input type=\"submit\" value={buttonText} className=\"btn btn-default\" />\n        </div>\n      </form>\n    </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}