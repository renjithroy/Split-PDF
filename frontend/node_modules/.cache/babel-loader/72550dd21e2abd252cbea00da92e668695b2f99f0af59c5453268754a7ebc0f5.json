{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument } from \"pdf-lib\"; // Import pdf-lib in the frontend\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // State variables to manage selected file, number of pages, and selected pages\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n\n  // Create a reference to the file input element\n  const fileInputRef = useRef(null);\n\n  // useEffect hook to fetch the number of pages when a PDF file is selected\n  useEffect(() => {\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        try {\n          // Load the PDF document using pdf-lib\n          const pdfDoc = await PDFDocument.load(pdfBuffer);\n          // Get the total number of pages in the PDF document\n          const numPages = pdfDoc.getPageCount();\n          console.log(\"Frontend Page no: \" + numPages);\n          setNumPages(numPages);\n        } catch {\n          // If there is an error in loading the PDF, handle it and show an alert to the user\n          alert(\"File type not supported\");\n\n          // Reset the file input value and clear all state variables related to the selected file\n          if (fileInputRef.current) {\n            fileInputRef.current.value = \"\";\n          }\n          setSelectedFile(null);\n          setNumPages(null);\n          setSelectedPages([]);\n          return;\n        }\n      };\n\n      // Read the selected file as an array buffer\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Function to handle file selection when a new file is chosen\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  // Function to handle checkbox selection for individual pages\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n\n    // Update the list of selected pages based on the checkbox selection\n    setSelectedPages(prevSelectedPages => isChecked ? [...prevSelectedPages, pageNumber] : prevSelectedPages.filter(p => p !== pageNumber));\n  };\n\n  // Function to handle form submission for PDF modification and download\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // Check if a PDF file has been selected before submitting the form\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n\n    // Create a FormData object to prepare the file for sending to the backend\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object along with the file to the backend\n    const selectedPagesData = {\n      selectedPages: selectedPages\n    };\n    try {\n      // Make a POST request to the backend to process the selected pages and return the modified PDF\n      const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        params: selectedPagesData,\n        // Pass selectedPagesData as query params\n        responseType: 'blob' // Tell axios to treat the response as a binary blob\n      });\n\n      // Log the response from the backend to the console\n      console.log(response.data);\n\n      // Trigger the download of the modified PDF by creating a Blob and using a link\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // Reset the file input value after the form submission\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n    } catch (error) {\n      // If there is an error during the request, show an alert with the error message\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n\n    // Reset all state variables related to the selected file and pages after form submission\n    setSelectedFile(null);\n    setNumPages(null);\n    setSelectedPages([]);\n  };\n\n  // JSX to render the component and UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"logo-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"first-letter-logo\",\n          children: \"S\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 54\n        }, this), \"plit\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"pdf-letter-logo\",\n          children: \"PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 102\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Extract Pages from your \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"pdf\",\n          children: \"PDF!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ref: fileInputRef,\n            type: \"file\",\n            className: \"form-control-file\",\n            name: \"pdfFile\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }, this), numPages !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Select Pages to Include:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this), Array.from({\n              length: numPages\n            }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: '5px',\n                paddingRight: '10px',\n                display: 'inline-block'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [\"Page \", index + 1, /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"form-checkbox\",\n                  name: \"selectCheckbox\",\n                  checked: selectedPages.includes(index + 1),\n                  onChange: event => handleCheckboxChange(event, index + 1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this), (index + 1) % 2 === 0 && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Download Modified PDF\",\n            className: \"btn btn-default\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"907ycvjRHCcxRjTpr8HbYQqbQTI=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","PDFDocument","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","numPages","setNumPages","selectedPages","setSelectedPages","fileInputRef","reader","FileReader","onload","pdfBuffer","result","pdfDoc","load","getPageCount","console","log","alert","current","value","readAsArrayBuffer","handleFileChange","event","target","files","handleCheckboxChange","page","isChecked","checked","pageNumber","prevSelectedPages","filter","p","handleSubmit","preventDefault","formData","FormData","append","selectedPagesData","response","post","headers","params","responseType","data","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","ref","name","onChange","Array","from","length","_","index","style","padding","paddingRight","display","includes","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument } from \"pdf-lib\"; // Import pdf-lib in the frontend\nimport './App.css';\n\nexport default function App() {\n  // State variables to manage selected file, number of pages, and selected pages\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n\n  // Create a reference to the file input element\n  const fileInputRef = useRef(null);\n\n  // useEffect hook to fetch the number of pages when a PDF file is selected\n  useEffect(() => {\n    if (selectedFile) {\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        try {\n          // Load the PDF document using pdf-lib\n          const pdfDoc = await PDFDocument.load(pdfBuffer);\n          // Get the total number of pages in the PDF document\n          const numPages = pdfDoc.getPageCount();\n          console.log(\"Frontend Page no: \" + numPages);\n          setNumPages(numPages);\n        } catch {\n          // If there is an error in loading the PDF, handle it and show an alert to the user\n          alert(\"File type not supported\");\n\n          // Reset the file input value and clear all state variables related to the selected file\n          if (fileInputRef.current) {\n            fileInputRef.current.value = \"\";\n          }\n\n          setSelectedFile(null);\n          setNumPages(null);\n          setSelectedPages([]);\n          return;\n        }\n      };\n\n      // Read the selected file as an array buffer\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Function to handle file selection when a new file is chosen\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  // Function to handle checkbox selection for individual pages\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n\n    // Update the list of selected pages based on the checkbox selection\n    setSelectedPages((prevSelectedPages) =>\n      isChecked\n        ? [...prevSelectedPages, pageNumber]\n        : prevSelectedPages.filter((p) => p !== pageNumber)\n    );\n  };\n\n  // Function to handle form submission for PDF modification and download\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // Check if a PDF file has been selected before submitting the form\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n\n    // Create a FormData object to prepare the file for sending to the backend\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object along with the file to the backend\n    const selectedPagesData = {\n      selectedPages: selectedPages,\n    };\n\n    try {\n      // Make a POST request to the backend to process the selected pages and return the modified PDF\n      const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n        params: selectedPagesData, // Pass selectedPagesData as query params\n        responseType: 'blob', // Tell axios to treat the response as a binary blob\n      });\n\n      // Log the response from the backend to the console\n      console.log(response.data);\n\n      // Trigger the download of the modified PDF by creating a Blob and using a link\n      const blob = new Blob([response.data], { type: 'application/pdf' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // Reset the file input value after the form submission\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n\n    } catch (error) {\n      // If there is an error during the request, show an alert with the error message\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n\n    // Reset all state variables related to the selected file and pages after form submission\n    setSelectedFile(null);\n    setNumPages(null);\n    setSelectedPages([]);\n  };\n\n  // JSX to render the component and UI\n  return (\n    <div>\n      <div className=\"logo\"><p className=\"logo-text\"><span className=\"first-letter-logo\">S</span>plit<span className=\"pdf-letter-logo\">PDF</span></p></div>\n    <div className=\"main\">\n      {/* Heading for the app */}\n      <h1>Extract Pages from your <span className=\"pdf\">PDF!</span></h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          {/* File input element */}\n          <input ref={fileInputRef} type=\"file\" className=\"form-control-file\" name=\"pdfFile\" onChange={handleFileChange} />\n          <br />\n          {/* Render the list of pages when the number of pages is known */}\n          {numPages !== null && (\n            <div>\n              {/* Instructions for selecting pages */}\n              <p>Select Pages to Include:</p>\n              {/* Render checkboxes for each page */}\n              {Array.from({ length: numPages }, (_, index) => (\n                <div style={{ padding: '5px', paddingRight: '10px', display: 'inline-block' }}>\n                  <label key={index}>\n                    Page {index + 1}\n                    {/* Checkbox for each page */}\n                    <input\n                      type=\"checkbox\"\n                      className=\"form-checkbox\"\n                      name=\"selectCheckbox\"\n                      checked={selectedPages.includes(index + 1)}\n                      onChange={(event) => handleCheckboxChange(event, index + 1)}\n                    />\n                  </label>\n                  {/* Add a line break after every two pages for better readability */}\n                  {(index + 1) % 2 === 0 && <br />}\n                </div>\n              ))}\n            </div>\n          )}\n          <br />\n          {/* Submit button */}\n          <input type=\"submit\" value=\"Download Modified PDF\" className=\"btn btn-default\" />\n        </div>\n      </form>\n    </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}