{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/components/PdfViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfViewer = ({\n  numPages,\n  pdfBase64,\n  imageUrls\n}) => {\n  _s();\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [images, setImages] = useState([]);\n  useEffect(() => {\n    // Fetch images for each page and store them in the 'images' state\n    const fetchPageImages = async () => {\n      try {\n        const imagePromises = imageUrls.map(url => axios.get(url, {\n          responseType: \"arraybuffer\"\n        }));\n        const imageResponses = await Promise.all(imagePromises);\n        const imageDatas = imageResponses.map(response => Buffer.from(response.data, \"binary\").toString(\"base64\"));\n        setImages(imageDatas);\n      } catch (error) {\n        console.error(\"Error fetching page images:\", error);\n      }\n    };\n    fetchPageImages();\n  }, [imageUrls]);\n  const handlePageSelection = pageNumber => {\n    if (selectedPages.includes(pageNumber)) {\n      setSelectedPages(prevSelected => prevSelected.filter(page => page !== pageNumber));\n    } else {\n      setSelectedPages(prevSelected => [...prevSelected, pageNumber]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Number of Pages: \", numPages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `data:image/png;base64,${image}`,\n        alt: `Page ${index + 1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedPages.includes(index + 1),\n          onChange: () => handlePageSelection(index + 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), \"Page \", index + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(selectedPages),\n        children: \"Extract Pages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(PdfViewer, \"FU/CK+abJwtRuqGKpgGeoI9La58=\");\n_c = PdfViewer;\nexport default PdfViewer;\nvar _c;\n$RefreshReg$(_c, \"PdfViewer\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","PdfViewer","numPages","pdfBase64","imageUrls","_s","selectedPages","setSelectedPages","images","setImages","fetchPageImages","imagePromises","map","url","get","responseType","imageResponses","Promise","all","imageDatas","response","Buffer","from","data","toString","error","console","handlePageSelection","pageNumber","includes","prevSelected","filter","page","className","children","fileName","_jsxFileName","lineNumber","columnNumber","image","index","src","alt","type","checked","onChange","onClick","log","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/components/PdfViewer.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst PdfViewer = ({ numPages, pdfBase64, imageUrls }) => {\n    const [selectedPages, setSelectedPages] = useState([]);\n    const [images, setImages] = useState([]);\n\n    useEffect(() => {\n        // Fetch images for each page and store them in the 'images' state\n        const fetchPageImages = async () => {\n            try {\n                const imagePromises = imageUrls.map((url) =>\n                    axios.get(url, { responseType: \"arraybuffer\" })\n                );\n                const imageResponses = await Promise.all(imagePromises);\n                const imageDatas = imageResponses.map((response) =>\n                    Buffer.from(response.data, \"binary\").toString(\"base64\")\n                );\n                setImages(imageDatas);\n            } catch (error) {\n                console.error(\"Error fetching page images:\", error);\n            }\n        };\n\n        fetchPageImages();\n    }, [imageUrls]);\n\n    const handlePageSelection = (pageNumber) => {\n        if (selectedPages.includes(pageNumber)) {\n            setSelectedPages((prevSelected) =>\n                prevSelected.filter((page) => page !== pageNumber)\n            );\n        } else {\n            setSelectedPages((prevSelected) => [...prevSelected, pageNumber]);\n        }\n    };\n\n    return (\n        <div className=\"pdf-viewer\">\n            <h2>Number of Pages: {numPages}</h2>\n            {images.map((image, index) => (\n                <div key={index}>\n                    <img src={`data:image/png;base64,${image}`} alt={`Page ${index + 1}`} />\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            checked={selectedPages.includes(index + 1)}\n                            onChange={() => handlePageSelection(index + 1)}\n                        />\n                        Page {index + 1}\n                    </label>\n                </div>\n            ))}\n            <div>\n                <button onClick={() => console.log(selectedPages)}>\n                    Extract Pages\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default PdfViewer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}