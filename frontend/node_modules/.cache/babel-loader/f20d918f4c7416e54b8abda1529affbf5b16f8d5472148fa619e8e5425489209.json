{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument, rgb } from \"pdf-lib\"; // Import pdf-lib in the frontend\nimport pdfjs from \"pdfjs-dist\"; // Import pdfjs-dist in the frontend\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  useEffect(() => {\n    // Fetch the number of pages from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n      };\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n    setSelectedPages(prevSelectedPages => isChecked ? [...prevSelectedPages, pageNumber] : prevSelectedPages.filter(p => p !== pageNumber));\n  };\n  const convertPDFtoImages = async pdfBuffer => {\n    const loadingTask = pdfjs.getDocument(new Uint8Array(pdfBuffer));\n    const pdf = await loadingTask.promise;\n    const images = [];\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n      const canvas = document.createElement(\"canvas\");\n      const context = canvas.getContext(\"2d\");\n      canvas.width = viewport.width;\n      canvas.height = viewport.height;\n      const renderContext = {\n        canvasContext: context,\n        viewport: viewport\n      };\n      await page.render(renderContext).promise;\n\n      // Convert canvas to image URL\n      const imageUrl = canvas.toDataURL(\"image/png\");\n      images.push(imageUrl);\n    }\n    return images;\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = async () => {\n      const pdfBuffer = reader.result;\n      try {\n        const images = await convertPDFtoImages(pdfBuffer);\n        console.log(images); // Array of image URLs\n\n        // You can do something with the array of image URLs here\n        // For example, display them in the UI or perform other operations\n      } catch (error) {\n        alert(\"Error converting PDF to images:\", error);\n        // Handle errors, show error messages, etc.\n      }\n    };\n\n    reader.readAsArrayBuffer(selectedFile);\n    setSelectedFile(null);\n    setNumPages(null);\n    setSelectedPages([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Extract Pages from your PDF!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control-file\",\n          accept: \".pdf\",\n          name: \"pdfFile\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), numPages !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Pages to Include:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), Array.from({\n            length: numPages\n          }, (_, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Page \", index + 1, /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"form-checkbox\",\n              name: \"selectCheckbox\",\n              checked: selectedPages.includes(index + 1),\n              onChange: event => handleCheckboxChange(event, index + 1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Convert PDF to Images\",\n          className: \"btn btn-default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XCxtoANiVcWgwhC3DfH4rEs1aG4=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","PDFDocument","rgb","pdfjs","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","numPages","setNumPages","selectedPages","setSelectedPages","reader","FileReader","onload","pdfBuffer","result","pdfDoc","load","getPageCount","console","log","readAsArrayBuffer","handleFileChange","event","target","files","handleCheckboxChange","page","isChecked","checked","pageNumber","prevSelectedPages","filter","p","convertPDFtoImages","loadingTask","getDocument","Uint8Array","pdf","promise","images","i","getPage","viewport","getViewport","scale","canvas","document","createElement","context","getContext","width","height","renderContext","canvasContext","render","imageUrl","toDataURL","push","handleSubmit","preventDefault","alert","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","accept","name","onChange","Array","from","length","_","index","includes","value","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument, rgb } from \"pdf-lib\"; // Import pdf-lib in the frontend\nimport pdfjs from \"pdfjs-dist\"; // Import pdfjs-dist in the frontend\nimport \"./App.css\";\n\nexport default function App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n\n  useEffect(() => {\n    // Fetch the number of pages from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n      };\n\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n\n    setSelectedPages((prevSelectedPages) =>\n      isChecked\n        ? [...prevSelectedPages, pageNumber]\n        : prevSelectedPages.filter((p) => p !== pageNumber)\n    );\n  };\n\n  const convertPDFtoImages = async (pdfBuffer) => {\n    const loadingTask = pdfjs.getDocument(new Uint8Array(pdfBuffer));\n    const pdf = await loadingTask.promise;\n    const images = [];\n\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const viewport = page.getViewport({ scale: 1.0 });\n\n      const canvas = document.createElement(\"canvas\");\n      const context = canvas.getContext(\"2d\");\n      canvas.width = viewport.width;\n      canvas.height = viewport.height;\n\n      const renderContext = {\n        canvasContext: context,\n        viewport: viewport,\n      };\n\n      await page.render(renderContext).promise;\n\n      // Convert canvas to image URL\n      const imageUrl = canvas.toDataURL(\"image/png\");\n      images.push(imageUrl);\n    }\n\n    return images;\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = async () => {\n      const pdfBuffer = reader.result;\n\n      try {\n        const images = await convertPDFtoImages(pdfBuffer);\n        console.log(images); // Array of image URLs\n\n        // You can do something with the array of image URLs here\n        // For example, display them in the UI or perform other operations\n\n      } catch (error) {\n        alert(\"Error converting PDF to images:\", error);\n        // Handle errors, show error messages, etc.\n      }\n    };\n\n    reader.readAsArrayBuffer(selectedFile);\n    setSelectedFile(null);\n    setNumPages(null);\n    setSelectedPages([]);\n  };\n\n  return (\n    <div className=\"main\">\n      <h1>Extract Pages from your PDF!</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <input\n            type=\"file\"\n            className=\"form-control-file\"\n            accept=\".pdf\"\n            name=\"pdfFile\"\n            onChange={handleFileChange}\n          />\n          <br />\n          {numPages !== null && (\n            <div>\n              <p>Select Pages to Include:</p>\n              {Array.from({ length: numPages }, (_, index) => (\n                <label key={index}>\n                  Page {index + 1}\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-checkbox\"\n                    name=\"selectCheckbox\"\n                    checked={selectedPages.includes(index + 1)}\n                    onChange={(event) => handleCheckboxChange(event, index + 1)}\n                  />\n                </label>\n              ))}\n              <br /> <br />\n            </div>\n          )}\n          <input type=\"submit\" value=\"Convert PDF to Images\" className=\"btn btn-default\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}