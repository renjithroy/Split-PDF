{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport PdfViewer from \"./components/PdfViewer\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      console.log(response.data); // Log the response from the backend\n\n      setNumPages(response.data.numPages); // Set the numPages state\n      setPdfBase64(response.data.pdfBase64); // Set the pdfBase64 state\n      setPdfImageUrls(response.data.pdfImageUrls); // Set the pdfImageUrls state\n\n      // Optionally, you can also clear the selectedFile state if needed\n      setSelectedFile(null);\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n  };\n\n  const handleSelectedPagesChange = selectedPages => {\n    setSelectedPages(selectedPages);\n    // You can perform any further actions with the selected pages here\n    // For example, you can send the selected pages to the server and create the modified PDF.\n    // The selectedPages data will be used to extract the selected pages from the uploaded PDF.\n    // Implement the logic to create the modified PDF in the backend and handle the response accordingly.\n    // For now, we are just logging the selected pages to the console.\n    console.log(\"Selected Pages:\", selectedPages);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Extract Pages from your PDF!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control-file\",\n          name: \"pdfFile\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit PDF\",\n          className: \"btn btn-default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), numPages !== null && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(PdfViewer, {\n        numPages: numPages,\n        pdfBase64: pdfBase64,\n        pdfImageUrls: pdfImageUrls\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7y2GsD6sxA4qx2FenNqDqK1ShMI=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","PdfViewer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedFile","setSelectedFile","numPages","setNumPages","handleFileChange","event","target","files","handleSubmit","preventDefault","alert","formData","FormData","append","response","post","headers","console","log","data","setPdfBase64","pdfBase64","setPdfImageUrls","pdfImageUrls","error","handleSelectedPagesChange","selectedPages","setSelectedPages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","onChange","value","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport PdfViewer from \"./components/PdfViewer\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      });\n\n      console.log(response.data); // Log the response from the backend\n\n      setNumPages(response.data.numPages); // Set the numPages state\n      setPdfBase64(response.data.pdfBase64); // Set the pdfBase64 state\n      setPdfImageUrls(response.data.pdfImageUrls); // Set the pdfImageUrls state\n\n      // Optionally, you can also clear the selectedFile state if needed\n      setSelectedFile(null);\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n  };\n\n  const handleSelectedPagesChange = (selectedPages) => {\n    setSelectedPages(selectedPages);\n    // You can perform any further actions with the selected pages here\n    // For example, you can send the selected pages to the server and create the modified PDF.\n    // The selectedPages data will be used to extract the selected pages from the uploaded PDF.\n    // Implement the logic to create the modified PDF in the backend and handle the response accordingly.\n    // For now, we are just logging the selected pages to the console.\n    console.log(\"Selected Pages:\", selectedPages);\n  };\n\n  return (\n    <div className=\"main\">\n      <h1>Extract Pages from your PDF!</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <input type=\"file\" className=\"form-control-file\" name=\"pdfFile\" onChange={handleFileChange} />\n          <br />\n          <input type=\"submit\" value=\"Submit PDF\" className=\"btn btn-default\" />\n        </div>\n      </form>\n      {numPages !== null && (\n        <>\n          <PdfViewer numPages={numPages} pdfBase64={pdfBase64} pdfImageUrls={pdfImageUrls} />\n        </>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}