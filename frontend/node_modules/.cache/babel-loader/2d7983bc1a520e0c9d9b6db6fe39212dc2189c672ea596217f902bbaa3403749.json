{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/components/PdfViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchPageImages = async numPages => {\n  const urls = [];\n  for (let i = 0; i < numPages; i++) {\n    try {\n      const response = await axios.post(\"http://localhost:5000/extract\", {\n        filename: \"your-pdf-filename.pdf\",\n        selectedPages: [i + 1]\n      }, {\n        responseType: \"arraybuffer\"\n      });\n      const imageBase64 = Buffer.from(response.data, \"binary\").toString(\"base64\");\n      urls.push(`data:image/png;base64,${imageBase64}`);\n    } catch (error) {\n      console.error(\"Error fetching page image:\", error);\n    }\n  }\n  return urls;\n};\nconst PdfViewer = ({\n  numPages,\n  pdfBase64\n}) => {\n  _s();\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [imageUrls, setImageUrls] = useState([]);\n  useEffect(() => {\n    // Fetch images for all pages when component mounts\n    fetchImages();\n  }, [numPages]);\n  const fetchImages = async () => {\n    const urls = await fetchPageImages(numPages);\n    setImageUrls(urls);\n  };\n  const handlePageSelection = pageNumber => {\n    if (selectedPages.includes(pageNumber)) {\n      setSelectedPages(prevSelected => prevSelected.filter(page => page !== pageNumber));\n    } else {\n      setSelectedPages(prevSelected => [...prevSelected, pageNumber]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Number of Pages: \", numPages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), imageUrls.map((imageUrl, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: `Page ${index + 1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedPages.includes(index + 1),\n          onChange: () => handlePageSelection(index + 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), \"Page \", index + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(selectedPages),\n        children: \"Extract Pages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(PdfViewer, \"oCqwJiKNccDAduGJu9qCxJXUWkg=\");\n_c = PdfViewer;\nexport default PdfViewer;\nvar _c;\n$RefreshReg$(_c, \"PdfViewer\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","fetchPageImages","numPages","urls","i","response","post","filename","selectedPages","responseType","imageBase64","Buffer","from","data","toString","push","error","console","PdfViewer","pdfBase64","_s","setSelectedPages","imageUrls","setImageUrls","fetchImages","handlePageSelection","pageNumber","includes","prevSelected","filter","page","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","imageUrl","index","src","alt","type","checked","onChange","onClick","log","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/components/PdfViewer.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst fetchPageImages = async (numPages) => {\n    const urls = [];\n\n    for (let i = 0; i < numPages; i++) {\n        try {\n            const response = await axios.post(\n                \"http://localhost:5000/extract\",\n                { filename: \"your-pdf-filename.pdf\", selectedPages: [i + 1] },\n                { responseType: \"arraybuffer\" }\n            );\n\n            const imageBase64 = Buffer.from(response.data, \"binary\").toString(\n                \"base64\"\n            );\n            urls.push(`data:image/png;base64,${imageBase64}`);\n        } catch (error) {\n            console.error(\"Error fetching page image:\", error);\n        }\n    }\n\n    return urls;\n};\n\nconst PdfViewer = ({ numPages, pdfBase64 }) => {\n    const [selectedPages, setSelectedPages] = useState([]);\n    const [imageUrls, setImageUrls] = useState([]);\n\n    useEffect(() => {\n        // Fetch images for all pages when component mounts\n        fetchImages();\n    }, [numPages]);\n\n    const fetchImages = async () => {\n        const urls = await fetchPageImages(numPages);\n        setImageUrls(urls);\n    };\n\n    const handlePageSelection = (pageNumber) => {\n        if (selectedPages.includes(pageNumber)) {\n            setSelectedPages((prevSelected) =>\n                prevSelected.filter((page) => page !== pageNumber)\n            );\n        } else {\n            setSelectedPages((prevSelected) => [...prevSelected, pageNumber]);\n        }\n    };\n\n    return (\n        <div className=\"pdf-viewer\">\n            <h2>Number of Pages: {numPages}</h2>\n            {imageUrls.map((imageUrl, index) => (\n                <div key={index}>\n                    <img src={imageUrl} alt={`Page ${index + 1}`} />\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            checked={selectedPages.includes(index + 1)}\n                            onChange={() => handlePageSelection(index + 1)}\n                        />\n                        Page {index + 1}\n                    </label>\n                </div>\n            ))}\n            <div>\n                <button onClick={() => console.log(selectedPages)}>\n                    Extract Pages\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default PdfViewer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}