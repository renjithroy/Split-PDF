{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/components/PdfViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Document, Page } from \"react-pdf\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfViewer = ({\n  numPages,\n  pdfBase64\n}) => {\n  _s();\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pdfFile, setPdfFile] = useState(null);\n  const [pdfUrl, setPdfUrl] = useState(\"\");\n  useEffect(() => {\n    const blob = new Blob([Buffer.from(pdfBase64, \"base64\")], {\n      type: \"application/pdf\"\n    });\n    const url = URL.createObjectURL(blob);\n    setPdfFile(blob);\n    setPdfUrl(url);\n  }, [pdfBase64]);\n  const handlePageSelection = pageNumber => {\n    setSelectedPages(prevSelected => prevSelected.includes(pageNumber) ? prevSelected.filter(page => page !== pageNumber) : [...prevSelected, pageNumber]);\n  };\n  const handleExtractPages = async () => {\n    if (selectedPages.length === 0) {\n      alert(\"Please select at least one page to extract.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"pdfFile\", pdfFile);\n    formData.append(\"selectedPages\", JSON.stringify(selectedPages));\n    try {\n      const response = await axios.post(\"http://localhost:5000/extract-pages\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        responseType: \"blob\"\n      });\n      const blob = new Blob([response.data], {\n        type: \"application/pdf\"\n      });\n      const url = URL.createObjectURL(blob);\n      window.open(url);\n    } catch (error) {\n      console.error(\"Error extracting pages:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Number of Pages: \", numPages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Document, {\n      file: pdfUrl,\n      children: Array.from({\n        length: numPages\n      }, (_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Page, {\n          pageNumber: i + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedPages.includes(i + 1),\n            onChange: () => handlePageSelection(i + 1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this), \"Page \", i + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExtractPages,\n        children: \"Extract Pages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(PdfViewer, \"S3BGU6uvDwfYyVhYJQUCs4IHIOw=\");\n_c = PdfViewer;\nexport default PdfViewer;\nvar _c;\n$RefreshReg$(_c, \"PdfViewer\");","map":{"version":3,"names":["React","useState","useEffect","Document","Page","axios","jsxDEV","_jsxDEV","PdfViewer","numPages","pdfBase64","_s","selectedPages","setSelectedPages","pdfFile","setPdfFile","pdfUrl","setPdfUrl","blob","Blob","Buffer","from","type","url","URL","createObjectURL","handlePageSelection","pageNumber","prevSelected","includes","filter","page","handleExtractPages","length","alert","formData","FormData","append","JSON","stringify","response","post","headers","responseType","data","window","open","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","file","Array","_","i","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/components/PdfViewer.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Document, Page } from \"react-pdf\";\nimport axios from \"axios\";\n\nconst PdfViewer = ({ numPages, pdfBase64 }) => {\n    const [selectedPages, setSelectedPages] = useState([]);\n    const [pdfFile, setPdfFile] = useState(null);\n    const [pdfUrl, setPdfUrl] = useState(\"\");\n\n    useEffect(() => {\n        const blob = new Blob([Buffer.from(pdfBase64, \"base64\")], { type: \"application/pdf\" });\n        const url = URL.createObjectURL(blob);\n        setPdfFile(blob);\n        setPdfUrl(url);\n    }, [pdfBase64]);\n\n    const handlePageSelection = (pageNumber) => {\n        setSelectedPages((prevSelected) =>\n            prevSelected.includes(pageNumber) ? prevSelected.filter((page) => page !== pageNumber) : [...prevSelected, pageNumber]\n        );\n    };\n\n    const handleExtractPages = async () => {\n        if (selectedPages.length === 0) {\n            alert(\"Please select at least one page to extract.\");\n            return;\n        }\n\n        const formData = new FormData();\n        formData.append(\"pdfFile\", pdfFile);\n        formData.append(\"selectedPages\", JSON.stringify(selectedPages));\n\n        try {\n            const response = await axios.post(\"http://localhost:5000/extract-pages\", formData, {\n                headers: { \"Content-Type\": \"multipart/form-data\" },\n                responseType: \"blob\",\n            });\n\n            const blob = new Blob([response.data], { type: \"application/pdf\" });\n            const url = URL.createObjectURL(blob);\n            window.open(url);\n        } catch (error) {\n            console.error(\"Error extracting pages:\", error);\n        }\n    };\n\n    return (\n        <div className=\"pdf-viewer\">\n            <h2>Number of Pages: {numPages}</h2>\n            <Document file={pdfUrl}>\n                {Array.from({ length: numPages }, (_, i) => (\n                    <div key={i}>\n                        <Page pageNumber={i + 1} />\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                checked={selectedPages.includes(i + 1)}\n                                onChange={() => handlePageSelection(i + 1)}\n                            />\n                            Page {i + 1}\n                        </label>\n                    </div>\n                ))}\n            </Document>\n            <div>\n                <button onClick={handleExtractPages}>Extract Pages</button>\n            </div>\n        </div>\n    );\n};\n\nexport default PdfViewer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}