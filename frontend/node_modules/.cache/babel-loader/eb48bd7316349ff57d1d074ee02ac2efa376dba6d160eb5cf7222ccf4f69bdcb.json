{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument, PDFPage } from \"pdf-lib\"; // Import pdf-lib in the frontend\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]); // New state for page images\n\n  useEffect(() => {\n    // Fetch the number of pages and extract page images from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n\n        // Extract page images\n        const images = await extractPageImages(pdfDoc);\n        setPageImages(images);\n      };\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Function to extract page images from the PDFDocument\n  const extractPageImages = async pdfDoc => {\n    const images = [];\n    for (let i = 0; i < pdfDoc.getPageCount(); i++) {\n      const page = pdfDoc.getPage(i);\n      const image = await (page === null || page === void 0 ? void 0 : page.asPng()); // Extract the page as a PNG image\n      images.push(image);\n    }\n    return images;\n  };\n\n  // ... (rest of the code remains the same)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Extract Pages from your PDF!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control-file\",\n          accept: \".pdf\",\n          name: \"pdfFile\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), numPages !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Pages to Include:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), Array.from({\n            length: numPages\n          }, (_, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Page \", index + 1, /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"form-checkbox\",\n              name: \"selectCheckbox\",\n              checked: selectedPages.includes(index + 1),\n              onChange: event => handleCheckboxChange(event, index + 1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this), pageImages[index] &&\n            /*#__PURE__*/\n            // Display the image if available\n            _jsxDEV(\"img\", {\n              src: `data:image/png;base64,${btoa(String.fromCharCode(...pageImages[index].data))}`,\n              alt: `Page ${index + 1}`,\n              width: \"100\",\n              height: \"100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Download Modified PDF\",\n          className: \"btn btn-default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QMRWw/qL4/KTudU/etLcT7fYJcg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","PDFDocument","PDFPage","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","numPages","setNumPages","selectedPages","setSelectedPages","pageImages","setPageImages","reader","FileReader","onload","pdfBuffer","result","pdfDoc","load","getPageCount","console","log","images","extractPageImages","readAsArrayBuffer","i","page","getPage","image","asPng","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","handleSubmit","type","accept","name","onChange","handleFileChange","Array","from","length","_","index","checked","includes","event","handleCheckboxChange","src","btoa","String","fromCharCode","data","alt","width","height","value","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument, PDFPage } from \"pdf-lib\"; // Import pdf-lib in the frontend\nimport './App.css';\n\nexport default function App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]); // New state for page images\n\n  useEffect(() => {\n    // Fetch the number of pages and extract page images from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n\n        // Extract page images\n        const images = await extractPageImages(pdfDoc);\n        setPageImages(images);\n      };\n\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Function to extract page images from the PDFDocument\n  const extractPageImages = async (pdfDoc) => {\n    const images = [];\n    for (let i = 0; i < pdfDoc.getPageCount(); i++) {\n      const page = pdfDoc.getPage(i);\n      const image = await page?.asPng(); // Extract the page as a PNG image\n      images.push(image);\n    }\n    return images;\n  };\n\n  // ... (rest of the code remains the same)\n\n  return (\n    <div className=\"main\">\n      <h1>Extract Pages from your PDF!</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <input type=\"file\" className=\"form-control-file\" accept=\".pdf\" name=\"pdfFile\" onChange={handleFileChange} />\n          <br />\n          {numPages !== null && (\n            <div>\n              <p>Select Pages to Include:</p>\n              {Array.from({ length: numPages }, (_, index) => (\n                <label key={index}>\n                  Page {index + 1}\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-checkbox\"\n                    name=\"selectCheckbox\"\n                    checked={selectedPages.includes(index + 1)}\n                    onChange={(event) => handleCheckboxChange(event, index + 1)}\n                  />\n                  {pageImages[index] && ( // Display the image if available\n                    <img\n                      src={`data:image/png;base64,${btoa(\n                        String.fromCharCode(...pageImages[index].data)\n                      )}`}\n                      alt={`Page ${index + 1}`}\n                      width=\"100\"\n                      height=\"100\"\n                    />\n                  )}\n                </label>\n              ))}\n              <br /> <br />\n            </div>\n          )}\n          <input type=\"submit\" value=\"Download Modified PDF\" className=\"btn btn-default\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}