{"ast":null,"code":"var _jsxFileName = \"/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument, PDFPage } from \"pdf-lib\";\nimport { toPng } from \"@pdf-lib/png-image\"; // Import the toPng function from pdf-lib/png-image\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]);\n  useEffect(() => {\n    // Fetch the number of pages and extract page images from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n\n        // Extract page images\n        const images = await extractPageImages(pdfDoc);\n        setPageImages(images);\n      };\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Function to extract page images from the PDFDocument\n  const extractPageImages = async pdfDoc => {\n    const images = [];\n    for (let i = 0; i < pdfDoc.getPageCount(); i++) {\n      const page = pdfDoc.getPage(i);\n      const image = await toPng(page); // Extract the page as a PNG image\n      images.push(image);\n    }\n    return images;\n  };\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n    setSelectedPages(prevSelectedPages => isChecked ? [...prevSelectedPages, pageNumber] : prevSelectedPages.filter(p => p !== pageNumber));\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object\n    const selectedPagesData = {\n      selectedPages: selectedPages\n    };\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        params: selectedPagesData,\n        // Pass selectedPagesData as query params\n        responseType: 'blob' // Tell axios to treat the response as a binary blob\n      });\n\n      console.log(response.data); // Log the response from the backend\n\n      // Trigger download by creating a Blob and using a link to initiate the download\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Extract Pages from your PDF!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control-file\",\n          accept: \".pdf\",\n          name: \"pdfFile\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), numPages !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Pages to Include:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), Array.from({\n            length: numPages\n          }, (_, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Page \", index + 1, /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"form-checkbox\",\n              name: \"selectCheckbox\",\n              checked: selectedPages.includes(index + 1),\n              onChange: event => handleCheckboxChange(event, index + 1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this), pageImages[index] && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `data:image/png;base64,${btoa(String.fromCharCode(...pageImages[index].data))}`,\n              alt: `Page ${index + 1}`,\n              width: \"100\",\n              height: \"100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Download Modified PDF\",\n          className: \"btn btn-default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QMRWw/qL4/KTudU/etLcT7fYJcg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","PDFDocument","PDFPage","toPng","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","numPages","setNumPages","selectedPages","setSelectedPages","pageImages","setPageImages","reader","FileReader","onload","pdfBuffer","result","pdfDoc","load","getPageCount","console","log","images","extractPageImages","readAsArrayBuffer","i","page","getPage","image","push","handleFileChange","event","target","files","handleCheckboxChange","isChecked","checked","pageNumber","prevSelectedPages","filter","p","handleSubmit","preventDefault","alert","formData","FormData","append","selectedPagesData","response","post","headers","params","responseType","data","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","accept","name","onChange","Array","from","length","_","index","includes","src","btoa","String","fromCharCode","alt","width","height","value","_c","$RefreshReg$"],"sources":["/Users/renjithroy/Documents/PDF Extractor/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PDFDocument, PDFPage } from \"pdf-lib\";\nimport { toPng } from \"@pdf-lib/png-image\"; // Import the toPng function from pdf-lib/png-image\nimport './App.css';\n\nexport default function App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pageImages, setPageImages] = useState([]);\n\n  useEffect(() => {\n    // Fetch the number of pages and extract page images from the selectedFile without uploading it to the backend\n    if (selectedFile) {\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const pdfBuffer = reader.result;\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\n        const numPages = pdfDoc.getPageCount();\n        console.log(\"Frontend Page no: \" + numPages);\n        setNumPages(numPages);\n\n        // Extract page images\n        const images = await extractPageImages(pdfDoc);\n        setPageImages(images);\n      };\n\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Function to extract page images from the PDFDocument\n  const extractPageImages = async (pdfDoc) => {\n    const images = [];\n    for (let i = 0; i < pdfDoc.getPageCount(); i++) {\n      const page = pdfDoc.getPage(i);\n      const image = await toPng(page); // Extract the page as a PNG image\n      images.push(image);\n    }\n    return images;\n  };\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleCheckboxChange = (event, page) => {\n    const isChecked = event.target.checked;\n    const pageNumber = page;\n\n    setSelectedPages((prevSelectedPages) =>\n      isChecked\n        ? [...prevSelectedPages, pageNumber]\n        : prevSelectedPages.filter((p) => p !== pageNumber)\n    );\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!selectedFile) {\n      alert(\"Please select a PDF file.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"pdfFile\", selectedFile);\n\n    // Send selectedPages separately as a JSON object\n    const selectedPagesData = {\n      selectedPages: selectedPages,\n    };\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n        params: selectedPagesData, // Pass selectedPagesData as query params\n        responseType: 'blob', // Tell axios to treat the response as a binary blob\n      });\n\n      console.log(response.data); // Log the response from the backend\n\n      // Trigger download by creating a Blob and using a link to initiate the download\n      const blob = new Blob([response.data], { type: 'application/pdf' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'modified.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n    } catch (error) {\n      alert(\"Error uploading the file:\", error);\n      // Handle errors, show error messages, etc.\n    }\n  };\n\n  return (\n    <div className=\"main\">\n      <h1>Extract Pages from your PDF!</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <input type=\"file\" className=\"form-control-file\" accept=\".pdf\" name=\"pdfFile\" onChange={handleFileChange} />\n          <br />\n          {numPages !== null && (\n            <div>\n              <p>Select Pages to Include:</p>\n              {Array.from({ length: numPages }, (_, index) => (\n                <label key={index}>\n                  Page {index + 1}\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-checkbox\"\n                    name=\"selectCheckbox\"\n                    checked={selectedPages.includes(index + 1)}\n                    onChange={(event) => handleCheckboxChange(event, index + 1)}\n                  />\n                  {pageImages[index] && (\n                    <img\n                      src={`data:image/png;base64,${btoa(\n                        String.fromCharCode(...pageImages[index].data)\n                      )}`}\n                      alt={`Page ${index + 1}`}\n                      width=\"100\"\n                      height=\"100\"\n                    />\n                  )}\n                </label>\n              ))}\n              <br /> <br />\n            </div>\n          )}\n          <input type=\"submit\" value=\"Download Modified PDF\" className=\"btn btn-default\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}